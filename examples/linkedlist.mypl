type Node {
    var int value = 0
    var Node next = nil
}

type List {
    var Node head = nil
    var int length = 0
}

fun void insert(List list, int val) {
    var newNode = new Node
    newNode.value = val
    newNode.next = list.head
    list.head = newNode
    list.length = list.length + 1
}

fun void internal_print(Node curNode) {
    if curNode == nil {
        return
    }
    print(curNode.value)
    print(" ")
    internal_print(curNode.next)
}

fun void merge_sort(List list) {
    if list.length == 0 {
        return
    }

    list.head = inner_merge_sort(list.head, list.length)
}

fun Node inner_merge_sort(Node left, int len) {
    if len <= 1 {
        return left
    }

    var mid = len / 2
    var tmp = left
    for i from 1 upto mid - 1{
        tmp = tmp.next
    }

    var right = tmp.next
    tmp.next = nil

    left = inner_merge_sort(left, mid)
    right = inner_merge_sort(right, len - mid)

    tmp = new Node
    var cur = tmp

    while ((left != nil) and (right != nil)) {
        if (left.value < right.value) {
            cur.next = left
            left = left.next
            cur = cur.next
        } else {
            cur.next = right
            right = right.next
            cur = cur.next
        }
    }

    while (left != nil) {
        cur.next = left
        left = left.next
        cur = cur.next
    }

    while (right != nil) {
        cur.next = right
        right = right.next
        cur = cur.next
    }

    cur = tmp.next
    delete tmp
    return cur
}

fun void main() {
    var list = new List
    timestart()
    for i from 0 upto 1000 {
        i = i + 1
        insert(list, i)
    }
    for i from 1 upto 1000 {
        i = i + 1
        insert(list, i)
    }
    print(list.head.value)
    print(list.head.value)
    timeend()
    internal_print(list.head)
    print(timedelta()) 
    timestart()
    merge_sort(list)
    internal_print(list.head)
    timeend()
    timedelta()
}